name: "3d-autoencoder" 
# -> data: 10 x 3 x 2 x 3 x 4 x 5 (#data pts x #num_channels x 4D)
# -> label: 10
layer {
  name: "dummy"
  type: "DummyData"
  top: "data"
  dummy_data_param {
    shape { dim: 10 dim: 1 dim: 2 dim: 3 dim: 4 dim: 5 }
    shape { dim: 10 dim: 1 }
  }
  include {
    phase: TRAIN
  }
}

# -> conv-out: 10 x 8 x 1 x 1 x 1 x 1
layer {
  name: "conv"
  type: "Convolution"
  bottom: "data"
  top: "conv-out"
  convolution_param {
    num_output: 8
    # specifies the index of the "channels" axis --
    # may be omitted as 1 is the default
    axis: 1
    #kernel_size: 2
    #kernel_size: 3
    #kernel_size: 4
    #kernel_size: 5  # i could just specify "kernel_size: 2" if i wanted 2x2x2x2 filters

    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2  
    stride: 2
  }
}
layer {
  name: "encode"
  type: "Sigmoid"
  bottom: "conv-out"
  top: "encode-out"
}


# -> deconv: 10 x 8 x 1 x 1 x 1 x 1
layer {
  name: "deconv"
  type: "Deconvolution"
  bottom: "encode-out"
  top: "deconv-out"
  deconvolution_param {
    num_output: 1
    # specifies the index of the "channels" axis --
    # may be omitted as 1 is the default
    axis: 1
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2  
    stride: 2
  }
}
layer {
  name: "decode"
  type: "Sigmoid"
  bottom: "encode-out"
  top: "decode-out"
}


# loss layer
layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "decode-out"
  bottom: "data"
  top: "cross_entropy_loss"
  loss_weight: 1
}
layer {
  name: "decode2"
  type: "Sigmoid"
  bottom: "decode-out"
  top: "decode-out2"
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "decode-out2"
  bottom: "data"
  top: "l2_error"
  loss_weight: 0
}






